#include "HttpUtils.hpp"

void homeRequest(AsyncWebServerRequest *request) 
{
    request->send(200, "text/plain", "Hello, world");
}

void notFound(AsyncWebServerRequest *request) 
{
    request->send(404, "text/plain", "Not found");
}

void getSWGStatus(AsyncWebServerRequest *request) 
{
    StaticJsonDocument<600> message;
    String response;
    
    unsigned long time1 = 0;
    unsigned long time2 = 0;
    bool powerStatus = false;
    bool prevPowerStatus = false;
    uint8_t powerBlinks = 0;
    uint8_t displayBlinks = 0;
    uint8_t displayDigit1 = 0;
    uint8_t displayDigit2 = 0;

    time1 = time2 = millis();
    while (time2-time1 < 1000) {        
        powerStatus = (statusDigit3 & (0x01 << LED_POWER)) >> LED_POWER == 1 ? true : false;
        if (prevPowerStatus != powerStatus) {
            powerBlinks++;
            prevPowerStatus = powerStatus;
        }
        vTaskDelay(200);
        //delayMicroseconds(100000);
        time2 = millis();
    }

    powerStatus = prevPowerStatus = false;
    time1 = time2 = millis();
    while (time2-time1 < 600) {
        powerStatus = (statusDigit2 > 0x00) ? true : false;
        if (powerStatus && displayDigit1 == 0 && displayDigit2 == 0)
         {
            displayDigit1 = statusDigit1;
            displayDigit2 = statusDigit2;
        }
        if (prevPowerStatus != powerStatus) {
            displayBlinks++;
            prevPowerStatus = powerStatus;
        }
        vTaskDelay(200);
        //delayMicroseconds(100000);        
        time2 = millis();
    }

    
   //String powerLedStatus = checkLedStatus(statusDigit3, LED_POWER);
    
    message["data"]["display"]["status"] = displayON ? "ON" : "OFF";
    message["data"]["display"]["brightness"] = displayIntensity;
    message["data"]["display"]["current_code"] = String(getDisplayDigitFromCode(displayDigit2)) + String(getDisplayDigitFromCode(displayDigit1));
    message["data"]["status"]["power"] = (powerBlinks == 0) ? "STANDBY" : (powerBlinks == 1) ? "ON" : "BOOTING";
    //message["data"]["status"]["power"] = (powerLedStatus == "BLINKING") ? "BOOTING" : (powerLedStatus == "OFF") ? "STANDBY" : "ON";
    message["data"]["status"]["boost"] = (statusDigit3 & (0x01 << LED_BOOST)) >> LED_BOOST == 1 ? "ON" : "OFF";
    message["data"]["status"]["sleep"] = (statusDigit3 & (0x01 << LED_SLEEP)) >> LED_SLEEP == 1 ? "ON" : "OFF";
    message["data"]["status"]["o3_generation"] = (statusDigit3 & (0x01 << LED_OZONE)) >> LED_OZONE == 1 ? "ON" : "OFF";
    message["data"]["status"]["pump_low_flow"] = (statusDigit3 & (0x01 << LED_PUMP_LOW_FLOW)) >> LED_PUMP_LOW_FLOW == 1 ? "ON" : "OFF";
    message["data"]["status"]["low_salt"] = (statusDigit3 & (0x01 << LED_LOW_SALT)) >> LED_LOW_SALT == 1 ? "ON" : "OFF";
    message["data"]["status"]["high_salt"] = (statusDigit3 & (0x01 << LED_HIGH_SALT)) >> LED_HIGH_SALT == 1 ? "ON" : "OFF";
    message["data"]["status"]["service"] = (statusDigit3 & (0x01 << LED_SERVICE)) >> LED_SERVICE == 1 ? "ON" : "OFF";
    //message["data"]["mode"]["programming"] = isDisplayBlinking(statusDigit1);
    message["data"]["mode"]["working"] = powerBlinks == 1;
    message["data"]["mode"]["programming"] = displayBlinks > 1;

    serializeJson(message, response);
    request->send(200, "application/json", response);

    /*
    if (request->hasParam(PARAM_FILTER)) {
        getFiltered(request);
    }
    else if(request->url().indexOf("/item/") != -1)
    {
        getById(request);
    }
    else {
        getAll(request);
    }
    */
}

void getWifiStatus(AsyncWebServerRequest *request) 
{
    StaticJsonDocument<200> message;
    String response;
    WiFiManager wifiManager;
    
    message["data"]["connection"]["ssid"] = wifiManager.getSSID();    
    message["data"]["connection"]["ip"] = WiFi.localIP();
    message["data"]["connection"]["mac_address"] = WiFi.macAddress();
    message["data"]["connection"]["subnet_mask"] = WiFi.subnetMask();
    message["data"]["connection"]["gateway"] = WiFi.gatewayIP();
    message["data"]["connection"]["hostname"] = WiFi.getHostname();


    serializeJson(message, response);
    request->send(200, "application/json", response);
}

void postRequest(AsyncWebServerRequest * request, uint8_t *data, size_t len, size_t index, size_t total)
{ 
    String bodyContent = GetBodyContent(data, len);
    StaticJsonDocument<200> doc;
    DeserializationError error = deserializeJson(doc, bodyContent);
    
    if (error) 
    { 
        request->send(400); 
        return;
    }

    String string_data = doc["data"];
    String message = "Create " + string_data;
    Serial.println(message);
    if (doc["data"]["power"] == "on")
    {        
        buttonStatus = BUTTON_POWER;
        prevButtonStatus = BUTTON_POWER;        
        keyCodeSetByAPI = true;
    }
    else
    {
        buttonStatus = BUTTON_POWER;
        prevButtonStatus = BUTTON_POWER;
        keyCodeSetByAPI = true;
    }
    request->send(200, "text/plain", message);
}